from gtda.diagrams import
import matplotlib.pyplot as plt
from gtda.diagrams import PersistenceLandscape,Amplitude
import pandas as pd
import numpy as np

#we can first find out which distance/epsilon gives a fully connected digram
result_1 = pd.read_csv("test.csv")
labels = result_1['label'].unique()

first_label_without_inf_death = -1
for label in labels:
    result_selected = result_1[(result_1['label'] == label) & (result_1['dimension'] == 1)]
    if np.inf not in result_selected['death'].values:
        first_label_without_inf_death = label
        print(first_label_without_inf_death)
        break

#Vectorization the PH by calculate wasserstein distance/landscape distance
result=[]
amplitude_transformer = Amplitude(metric='wasserstein') # can change to metric='landscape'
#change the range accordingly
for i in range(1,15):
  # call the csv file generated by the py file PHGeneration.py
  result_1 = pd.read_csv("test.csv")
  result_selected = result_1 [result_1 ['label'] == i]
  diagram = result_selected[["birth", "death","dimension"]].values
  diagram = diagram[~np.isinf(diagram).any(axis=1)]
  amplitude_features = amplitude_transformer.fit_transform([np.array(diagram)])
  result.append(amplitude_features[0][1])


#Visualization
numbers = list(range(20,300,20))
plt.plot(numbers, result)
plt.xlabel('Distance')
plt.ylabel('Value')
plt.title('Vectorization')
plt.show()


#The following is a supplement of ploting the Landscape diagram for a certain PH
'''
BC = PersistenceLandscape()
result_1 = pd.read_csv("test.csv")
result_selected = result_1[result_1['label'] == 3]
diagram = result_selected[["birth", "death", "dimension"]].values

# Remove rows containing 'inf' values from the diagram
diagram = diagram[~np.isinf(diagram).any(axis=1)]
X_betti_curves = BC.fit_transform([diagram])
BC.plot(X_betti_curves)
'''
